// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	sync "sync"

	events "github.com/alphagov/paas-metric-exporter/events"
	metrics "github.com/alphagov/paas-metric-exporter/metrics"
	processors "github.com/alphagov/paas-metric-exporter/processors"
)

type FakeProcessor struct {
	ProcessStub        func(*events.AppEvent) ([]metrics.Metric, error)
	processMutex       sync.RWMutex
	processArgsForCall []struct {
		arg1 *events.AppEvent
	}
	processReturns struct {
		result1 []metrics.Metric
		result2 error
	}
	processReturnsOnCall map[int]struct {
		result1 []metrics.Metric
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProcessor) Process(arg1 *events.AppEvent) ([]metrics.Metric, error) {
	fake.processMutex.Lock()
	ret, specificReturn := fake.processReturnsOnCall[len(fake.processArgsForCall)]
	fake.processArgsForCall = append(fake.processArgsForCall, struct {
		arg1 *events.AppEvent
	}{arg1})
	fake.recordInvocation("Process", []interface{}{arg1})
	fake.processMutex.Unlock()
	if fake.ProcessStub != nil {
		return fake.ProcessStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.processReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProcessor) ProcessCallCount() int {
	fake.processMutex.RLock()
	defer fake.processMutex.RUnlock()
	return len(fake.processArgsForCall)
}

func (fake *FakeProcessor) ProcessCalls(stub func(*events.AppEvent) ([]metrics.Metric, error)) {
	fake.processMutex.Lock()
	defer fake.processMutex.Unlock()
	fake.ProcessStub = stub
}

func (fake *FakeProcessor) ProcessArgsForCall(i int) *events.AppEvent {
	fake.processMutex.RLock()
	defer fake.processMutex.RUnlock()
	argsForCall := fake.processArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeProcessor) ProcessReturns(result1 []metrics.Metric, result2 error) {
	fake.processMutex.Lock()
	defer fake.processMutex.Unlock()
	fake.ProcessStub = nil
	fake.processReturns = struct {
		result1 []metrics.Metric
		result2 error
	}{result1, result2}
}

func (fake *FakeProcessor) ProcessReturnsOnCall(i int, result1 []metrics.Metric, result2 error) {
	fake.processMutex.Lock()
	defer fake.processMutex.Unlock()
	fake.ProcessStub = nil
	if fake.processReturnsOnCall == nil {
		fake.processReturnsOnCall = make(map[int]struct {
			result1 []metrics.Metric
			result2 error
		})
	}
	fake.processReturnsOnCall[i] = struct {
		result1 []metrics.Metric
		result2 error
	}{result1, result2}
}

func (fake *FakeProcessor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.processMutex.RLock()
	defer fake.processMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeProcessor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ processors.Processor = new(FakeProcessor)
